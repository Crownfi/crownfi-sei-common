// auto-generated by C.E.W.T.
// DO NOT EDIT BY HAND!!
import { normalizeFormValues } from "@aritz-cracker/browser-utils";
export class WalletOptionsRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#text?: HTMLSpanElement;
	get text() {
		if (this.#text === undefined) {
			this.#text = this.#element.querySelector("[cewt-ref=\"text\"]:not(:scope [is] *)")!;
		}
		return this.#text;
	}
	#seiAddressText?: HTMLSpanElement;
	get seiAddressText() {
		if (this.#seiAddressText === undefined) {
			this.#seiAddressText = this.#element.querySelector("[cewt-ref=\"sei-address-text\"]:not(:scope [is] *)")!;
		}
		return this.#seiAddressText;
	}
	#evmAddressText?: HTMLSpanElement;
	get evmAddressText() {
		if (this.#evmAddressText === undefined) {
			this.#evmAddressText = this.#element.querySelector("[cewt-ref=\"evm-address-text\"]:not(:scope [is] *)")!;
		}
		return this.#evmAddressText;
	}
}
let _templateWalletOptions: HTMLTemplateElement | null = null;
function getWalletOptionsTemplate(): HTMLTemplateElement {
	if (_templateWalletOptions == null) {
		 _templateWalletOptions = document.createElement("template")
		 _templateWalletOptions.innerHTML = "\n\t<span cewt-ref=\"text\">Connect wallet</span>\n\t<dropdown-menu linked-elements=\"button:has(> #this)\" click-trigger=\"primary\" open-position=\"element-bottom-centered\">\n\t\t<dropdown-menu-item>\n\t\t\t<span>Sei-native address</span>\n\t\t\t<dropdown-menu-inner>\n\t\t\t\t<dropdown-menu-item value=\"sei-address-copy\">\n\t\t\t\t\t<span><span cewt-ref=\"sei-address-text\">[unknown]</span> (copy)</span>\n\t\t\t\t</dropdown-menu-item>\n\t\t\t\t<dropdown-menu-item value=\"sei-address-seitrace\">\n\t\t\t\t\t<span>View on seitrace</span><span class=\"cicon cicon-link-external\"></span>\n\t\t\t\t</dropdown-menu-item>\n\t\t\t\t<dropdown-menu-item value=\"sei-address-seican\">\n\t\t\t\t\t<span>View on seican</span><span class=\"cicon cicon-link-external\"></span>\n\t\t\t\t</dropdown-menu-item>\n\t\t\t</dropdown-menu-inner>\n\t\t</dropdown-menu-item>\n\t\t<dropdown-menu-item>\n\t\t\t<span>EVM address</span>\n\t\t\t<dropdown-menu-inner>\n\t\t\t\t<dropdown-menu-item value=\"evm-address-copy\">\n\t\t\t\t\t<span><span cewt-ref=\"evm-address-text\">[unknown]</span> (copy)</span>\n\t\t\t\t</dropdown-menu-item>\n\t\t\t\t<dropdown-menu-item value=\"evm-address-seitrace\">\n\t\t\t\t\t<span>View on seitrace</span><span class=\"cicon cicon-link-external\"></span>\n\t\t\t\t</dropdown-menu-item>\n\t\t\t</dropdown-menu-inner>\n\t\t</dropdown-menu-item>\n\t\t<hr class=\"gems\">\n\t\t<dropdown-menu-item value=\"switch-wallet\">Switch wallet</dropdown-menu-item>\n\t\t<dropdown-menu-item value=\"disconnect\">Disconnect wallet</dropdown-menu-item>\n\t</dropdown-menu>\n";
	}
	return _templateWalletOptions;
}
export class WalletOptionsAutogen extends HTMLButtonElement {
	readonly refs: WalletOptionsRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWalletOptionsTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "wallet-options"); // allow for easy query selecting
		this.refs = new WalletOptionsRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("wallet-options", this, { extends: "button"});
	}
}
export class WalletChoiceRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#img?: HTMLImageElement;
	get img() {
		if (this.#img === undefined) {
			this.#img = this.#element.querySelector("[cewt-ref=\"img\"]:not(:scope [is] *)")!;
		}
		return this.#img;
	}
	#text?: HTMLSpanElement;
	get text() {
		if (this.#text === undefined) {
			this.#text = this.#element.querySelector("[cewt-ref=\"text\"]:not(:scope [is] *)")!;
		}
		return this.#text;
	}
}
let _templateWalletChoice: HTMLTemplateElement | null = null;
function getWalletChoiceTemplate(): HTMLTemplateElement {
	if (_templateWalletChoice == null) {
		 _templateWalletChoice = document.createElement("template")
		 _templateWalletChoice.innerHTML = "\n\t<img src=\"https://www.crownfi.io/assets/placeholder.svg\" cewt-ref=\"img\">\n\t<span cewt-ref=\"text\">undefined</span>\n";
	}
	return _templateWalletChoice;
}
export class WalletChoiceAutogen extends HTMLButtonElement {
	readonly refs: WalletChoiceRefs;
	static get observedAttributes() {
		return ["icon", "text"];
	}
	#attributeIconValue: string | null = null;
	get icon(): string | null {
		return this.#attributeIconValue;
	}
	set icon(v: string | null) {
		if (v == null) {
			this.removeAttribute("icon");
		}else{
			this.setAttribute("icon", v);
		}
	}
	protected onIconChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	#attributeTextValue: string | null = null;
	get text(): string | null {
		return this.#attributeTextValue;
	}
	set text(v: string | null) {
		if (v == null) {
			this.removeAttribute("text");
		}else{
			this.setAttribute("text", v);
		}
	}
	protected onTextChanged(oldValue: string | null, newValue: string | null) {
		// To be overridden by child class
	}
	attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {
		switch(name) {
			case "icon":
				this.#attributeIconValue = newValue;
				this.onIconChanged(oldValue, newValue);
				break;
			case "text":
				this.#attributeTextValue = newValue;
				this.onTextChanged(oldValue, newValue);
				break;
			default:
				// Shouldn't happen
		}
	}
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWalletChoiceTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "wallet-choice"); // allow for easy query selecting
		this.refs = new WalletChoiceRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("wallet-choice", this, { extends: "button"});
	}
}
export class WalletModalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#choices?: HTMLDivElement;
	get choices() {
		if (this.#choices === undefined) {
			this.#choices = this.#element.querySelector("[cewt-ref=\"choices\"]:not(:scope [is] *)")!;
		}
		return this.#choices;
	}
}
let _templateWalletModal: HTMLTemplateElement | null = null;
function getWalletModalTemplate(): HTMLTemplateElement {
	if (_templateWalletModal == null) {
		 _templateWalletModal = document.createElement("template")
		 _templateWalletModal.innerHTML = "\n\t<h1>Choose wallet</h1>\n\t<form method=\"dialog\">\n\t\t<div cewt-ref=\"choices\" class=\"wallet-choices\">\n\t\t\t<!-- Auto-generated -->\n\t\t</div>\n\t\t<button class=\"small danger\" value=\"\">Cancel</button>\n\t</form>\n";
	}
	return _templateWalletModal;
}
export class WalletModalAutogen extends HTMLDialogElement {
	readonly refs: WalletModalRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getWalletModalTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "wallet-modal"); // allow for easy query selecting
		this.refs = new WalletModalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("wallet-modal", this, { extends: "dialog"});
	}
}
export class SeedPhraseModalRefs {
	#element: HTMLElement | ShadowRoot;
	constructor(element: HTMLElement | ShadowRoot) {
		this.#element = element;
	}
	#form?: HTMLFormElementKnownControls<SeedPhraseModalFormCollection1, SeedPhraseModalFormValues1>;
	get form() {
		if (this.#form === undefined) {
			this.#form = this.#element.querySelector("[cewt-ref=\"form\"]:not(:scope [is] *)")!;
			this.#form.values = normalizeFormValues.bind(this.#form, this.#form) as any;
		}
		return this.#form;
	}
	#cancelBtn?: HTMLButtonElement;
	get cancelBtn() {
		if (this.#cancelBtn === undefined) {
			this.#cancelBtn = this.#element.querySelector("[cewt-ref=\"cancel-btn\"]:not(:scope [is] *)")!;
		}
		return this.#cancelBtn;
	}
}
let _templateSeedPhraseModal: HTMLTemplateElement | null = null;
function getSeedPhraseModalTemplate(): HTMLTemplateElement {
	if (_templateSeedPhraseModal == null) {
		 _templateSeedPhraseModal = document.createElement("template")
		 _templateSeedPhraseModal.innerHTML = "\n\t<h1>Enter seed phrase</h1>\n\t<i class=\"dialog-cicon cicon-warning\"></i>\n\t<p>Entering your seed phrase directly into any website is a very bad idea, as it will allow that website to authorize all transactions to all your accounts without your approval.</p>\n\t<p><i>This includes stealing all your funds from all accounts associated with the seed phrase!</i></p>\n\t<p>This functionality primarily exists for testing and development, and should never be used unless you fully understand what you\'re doing and the risks involved.</p>\n\t<form cewt-ref=\"form\" method=\"dialog\">\n\t\t<label>\n\t\t\t<span>Seed phrase:</span>\n\t\t\t<input name=\"seed\" type=\"text\" placeholder=\"abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Account Index (0 for first account, 1 for second account, etc.):</span>\n\t\t\t<input name=\"index\" type=\"number\" min=\"0\" max=\"255\" value=\"0\">\n\t\t</label>\n\t\t<label>\n\t\t\t<span>Coin type (118 if the phrase was generated with a Sei-native wallet, 60 if it was generated with an Ethereum wallet):</span>\n\t\t\t<input name=\"cointype\" type=\"number\" min=\"0\" max=\"255\" value=\"118\">\n\t\t</label>\n\t\t<div class=\"button-row equal-width\">\n\t\t\t<button class=\"danger small\">Pls don\'t steal me moni</button>\n\t\t\t<button class=\"small\" cewt-ref=\"cancel-btn\">Cancel</button>\n\t\t</div>\n\t</form>\n";
	}
	return _templateSeedPhraseModal;
}
export class SeedPhraseModalAutogen extends HTMLDialogElement {
	readonly refs: SeedPhraseModalRefs;
	constructor() {
		super();
		if (this.childElementCount == 0) {
			this.appendChild(
				getSeedPhraseModalTemplate()
					.content
					.cloneNode(true)
			);
		}
		this.setAttribute("is", "seed-phrase-modal"); // allow for easy query selecting
		this.refs = new SeedPhraseModalRefs(this);
	}
	connectedCallback() {
		// To be overridden by child class
	}
	disconnectedCallback() {
		// To be overridden by child class
	}
	adoptedCallback() {
		// To be overridden by child class
	}
	public static registerElement() {
		customElements.define("seed-phrase-modal", this, { extends: "dialog"});
	}
}
export type SeedPhraseModalFormCollection1 = HTMLFormControlsCollection & {
	"seed": HTMLInputElement;
	namedItem(name: "seed"): HTMLInputElement;
	"index": HTMLInputElement;
	namedItem(name: "index"): HTMLInputElement;
	"cointype": HTMLInputElement;
	namedItem(name: "cointype"): HTMLInputElement;
};
export type SeedPhraseModalFormValues1 = {
	"seed": string;
	"index": number;
	"cointype": number;
};
interface HTMLFormElementKnownControls<C extends HTMLFormControlsCollection, V> extends HTMLFormElement {
	readonly elements: C;
	values: () => V;
};
